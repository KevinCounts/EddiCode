#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created by Mike Hobbins
Created on Nov 30, 2023
"""
import calendar
import os
import numpy as np
import cartopy.crs as ccrs
from matplotlib import pyplot as plt
from matplotlib.colors import BoundaryNorm
from matplotlib.colors import ListedColormap
import cartopy.feature as cfeature

#Custom colormap declaration
def customdivergecolormap(clevs):
  colors = ['#543005','#8c510a','#bf812d','#dfc27d','#f6e8c3','#FFFFFF','#c7eae5','#80cdc1','#35978f','#01665f','#003c30','#003c30']
  cmap = ListedColormap(colors)
  norm = BoundaryNorm(boundaries=clevs,ncolors=len(clevs)-1)
  return cmap,norm

# Parse date and time-scale parameters from filename
def parsefile(infile):
    TStype=infile[-15:-13]
    TSnum=infile[-17:-15]
    YYYY=infile[-12:-8]
    MM=infile[-8:-6]
    DD=infile[-6:-4]
    delta = infile[-28:-26]
    if TStype=='mn':
        TSout = 'month'
    elif TStype=='wk':
        TSout = 'week'
    else:
        print('error, timescale type not recognized')
    date=YYYY+MM.zfill(2)+(DD).zfill(2)
    outfile = "EDDI_" + delta + 'day_change_' +str(TSnum).zfill(2)+str(TStype)+"_"+str(date)+".png"
    return outfile, TSout, TSnum, MM, DD, YYYY, delta

# Set geographic parameters from data header
def geoparam(datain_str = []):
    nr = len(datain_str)-6
    nc = len(datain_str[6].split( ))
    ncols = int(datain_str[0][6:])
    nrows = int(datain_str[1][6:])
    xllcorner = float(datain_str[2][9:])
    yllcorner = float(datain_str[3][9:])
    cellsize = float(datain_str[4][8:])

    # Ingest EDDI data and change the sign (to force colorbar's drought->wet order)
    invar = np.zeros((nr,nc),'f')
    xx = 0
    for i in range(6,nr,1):
        split_istr = datain_str[i].split( )
        for j in range(nc):
            invar[xx,j]=-1.*float(split_istr[j])
        xx+=1
    lonin=np.linspace(xllcorner,xllcorner+(cellsize*ncols),ncols)
    latin=np.linspace(yllcorner,yllcorner+(cellsize*nrows),nrows)
    latin=np.flip(latin)
    invar[invar == 99]=0
    return lonin, latin, invar

def plotgen(path,dir_list):
    #Create one figure for each stakeholder. Set up projection to be centered in the region, extent, and shapes
    #Plots can be standard per stakholder, then the data can be added later
    latlon = [235,293,25.0,53.0]
    proj = ccrs.LambertConformal(central_longitude=(latlon[0]+latlon[1])/2,central_latitude=(latlon[2]+latlon[3])/2)
    fig = plt.figure()
    ax = fig.add_subplot(111,projection=proj)
    ax.set_extent(latlon,crs=ccrs.PlateCarree())

    clevs1 = [-5,-4,-3,-2,-1,0,1,2,3,4,5,6]
    cmap1,norm1=customdivergecolormap(clevs1)
    
    #Begin adding shapes to the map. Start with oceans, lakes, and borders
    ocean = cfeature.NaturalEarthFeature(category='physical',name='ocean',scale='50m')
    ax.add_feature(ocean,facecolor='lightgray',edgecolor='none',lw=1,zorder=15)
    lakes = cfeature.NaturalEarthFeature(category='physical',name='lakes',scale='110m')
    ax.add_feature(lakes,facecolor='lightgray',edgecolor='none',lw=1,zorder=2)
    ax.add_feature(cfeature.STATES,edgecolor='black',lw=0.5,zorder=3)
    ax.add_feature(cfeature.BORDERS,edgecolor='black',lw=0.5,zorder=4)
    
    fig.text(0.9,0.02,'Generated by NOAA/OAR/Physical Sciences Laboratory',fontsize=6,va='bottom',ha='right',color='dimgrey')

    #Now that the base figure has been created, loop through all data files and plot data
    #The plot data will get overwritten every loop to create a new plot, but colorbar needs to be cleared
    for file in dir_list:
        if file.startswith("EDDI_") and file.endswith(".asc"):
            infile = path + file

            #Get file data and set figure title accordingly
            outfile, TSout, TSnum, MM, DD, YYYY,delta = parsefile(infile)
            fin = open(infile,'r')
            datain_str = fin.readlines()
            fin.close()
            lonin, latin, invar = geoparam(datain_str)
            month_name = calendar.month_name[int(MM)]
            lonin2d, latin2d = np.meshgrid(lonin,latin)
            if delta == '07':
                delta = '7'
            ax.set_title(TSnum.lstrip("0")+"-"+TSout+' EDDI: changes during the ' + delta + ' days ending on ' +month_name+" "+str(int(DD))+", "+YYYY, fontsize=9,weight='normal',y=1.0)
            conf = ax.pcolormesh(lonin2d,latin2d,invar,transform=ccrs.PlateCarree(),norm=norm1,cmap=cmap1)

            #Create colorbar to match data. Colorbar will be placed automatically, but labels need to be positioned specifically
            cbar = fig.colorbar(conf,ax=ax,orientation='horizontal',ticks=clevs1,shrink=.8, pad=0.05)
            ax.tick_params(labelsize=0,width=0.25,gridOn='True',grid_color='black',grid_lw=0.25,length=2,pad=1)
            cbar.outline.set_linewidth(0.25)
            ax.set_zorder(1)
            cbar.ax.set_xticks([])
            cbar.ax.text(-4.5,-0.7,'-5',fontsize=8,va='bottom',ha='center',color='black')
            cbar.ax.text(-3.5,-0.7,'-4',fontsize=8,va='bottom',ha='center',color='black')
            cbar.ax.text(-2.5,-0.7,'-3',fontsize=8,va='bottom',ha='center',color='black')
            cbar.ax.text(-1.5,-0.7,'-2',fontsize=8,va='bottom',ha='center',color='black')
            cbar.ax.text(-0.5,-0.7,'-1',fontsize=8,va='bottom',ha='center',color='black')
            cbar.ax.text(0.5,-0.7,'0',fontsize=8,va='bottom',ha='center',color='black')
            cbar.ax.text(1.5,-0.7,'1',fontsize=8,va='bottom',ha='center',color='black')
            cbar.ax.text(2.5,-0.7,'2',fontsize=8,va='bottom',ha='center',color='black')
            cbar.ax.text(3.5,-0.7,'3',fontsize=8,va='bottom',ha='center',color='black')
            cbar.ax.text(4.5,-0.7,'4',fontsize=8,va='bottom',ha='center',color='black')
            cbar.ax.text(5.5,-0.7,'5',fontsize=8,va='bottom',ha='center',color='black')

            # Add text to the colorbar
            cbar.ax.text(-5,1.1,'Drying tendency',fontsize=8,va='bottom',ha='left',color='black')
            cbar.ax.text(6,1.1,'Wetting tendency',fontsize=8,va='bottom',ha='right',color='black')
            cbar.ax.text(-3,-1.25,'Only regions that start or end above the 70th percentile (i.e., ED0-ED4) are shown.',fontsize=7,va='bottom',ha='left',color='black')

            #Save this figure and remove colorbar before moving on to next datafile
            #fig.subplots_adjust(left=0, right=1, bottom=.05, top=.95)
            plt.tight_layout()
            plt.savefig(('../Changemaps/' + outfile),dpi=500)
            cbar.remove()
    #Close plot to free up some memory
    plt.close()

def main():
    path=''
    dir_list = os.listdir(path) # this needs to be the path where the EDDI*.asc file reside - if in that path already delete argument. May adjust argument to choose the ascii file I want.
    plotgen(path,dir_list)

if __name__ == '__main__':
    main()