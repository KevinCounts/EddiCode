#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created by Mike Hobbins
Created on Nov 30, 2023
"""
import datetime
import os
import numpy as np
import cartopy.crs as ccrs
from matplotlib import pyplot as plt
from matplotlib.colors import BoundaryNorm
from matplotlib.colors import ListedColormap
import cartopy.feature as cfeature

#Custom colormap declaration
def customdivergecolormap(clevs):
  colors = ['#3C28B4','#7060DC','#1464D2','#2882F0','#50A5F5','#96D2FA','#E1FFFF','#FFFFFF','#FFFAAA','#FFE878','#FFC03C','#FFA000','#FF6000','#E11400','#A50000','#F5A0A0','#FFC8C8']
  cmap = ListedColormap(colors)
  norm = BoundaryNorm(boundaries=clevs,ncolors=len(clevs)-1)
  return cmap,norm

# Parse date and time-scale parameters from filename
def parsefile(infile):
    datestr= infile[-12:-4]
    date=datetime.datetime.strptime(datestr,'%Y%m%d')
    EDDIdate = date
    outfile = "ETrs_attribution_daily_" +EDDIdate.strftime('%Y%m%d')+".png"
    return outfile, EDDIdate

# Set geographic parameters from data header
def geoparam(datain_str = []):
    nr = len(datain_str)-6
    nc = len(datain_str[6].split( ))
    ncols = int(datain_str[0][6:])
    nrows = int(datain_str[1][6:])
    xllcorner = float(datain_str[2][9:])
    yllcorner = float(datain_str[3][9:])
    cellsize = float(datain_str[4][8:])

    # Ingest EDDI data and change the sign (to force colorbar's drought->wet order)
    invar = np.zeros((nr,nc),'f')
    xx = 0
    for i in range(6,nr,1):
        split_istr = datain_str[i].split( )
        for j in range(nc):
            invar[xx,j]=1.*float(split_istr[j])
        xx+=1
    lonin=np.linspace(xllcorner,xllcorner+(cellsize*ncols),ncols)
    latin=np.linspace(yllcorner,yllcorner+(cellsize*nrows),nrows)
    latin=np.flip(latin)
    return lonin, latin, invar

def plotgen(path,dir_list):
    #Create one figure for each stakeholder. Set up projection to be centered in the region, extent, and shapes
    #Plots can be standard per stakholder, then the data can be added later
    latlon = [235,293,25.0,53.0]
    proj = ccrs.LambertConformal(central_longitude=(latlon[0]+latlon[1])/2,central_latitude=(latlon[2]+latlon[3])/2)
    clevs1 = [-2.25,-1.95,-1.65,-1.35,-1.05,-0.75,-0.45,0,0.45,0.75,1.05,1.35,1.65,1.95,2.25,2.55,2.85,3]
    cmap1,norm1=customdivergecolormap(clevs1)
    fig = plt.figure()

    #Anomaly file first
    #Get file data and set figure title accordingly
    filename = [i for i in dir_list if i.startswith('ETrs_anom')]
    infile = path + filename[0]
    outfile, EDDIdate = parsefile(infile)
    fig.suptitle('Daily ETrs attribution ending on ' + EDDIdate.strftime('%Y.%m.%d'), ha='center') 
    fig.text(0.9,0.1,'Generated by NOAA/OAR/Physical Sciences Laboratory',fontsize=6,va='bottom',ha='right',color='dimgrey')
    axes = []
    x=0
    for file in dir_list:
        infile = path + file
        fin = open(infile,'r')
        datain_str = fin.readlines()
        fin.close()
        lonin, latin, invar = geoparam(datain_str)
        lonin2d, latin2d = np.meshgrid(lonin,latin)

        if file.startswith("ETrs_anom"):
            ax = fig.add_subplot(231,projection=proj)
            ax.set_title('ETrs Anom',fontsize=8)
        elif file.startswith("Cont_SpHm"):
            ax = fig.add_subplot(232,projection=proj)
            ax.set_title('Specific Humidity',fontsize=8)
        elif file.startswith("Cont_T_2m"):
            ax = fig.add_subplot(233,projection=proj)
            ax.set_title('Temperature',fontsize=8)
        elif file.startswith("Cont_SWdn"):
            ax = fig.add_subplot(234,projection=proj)
            ax.set_title('Short Wave Radiation',fontsize=8)
        elif file.startswith("Cont_U_2m"):
            ax = fig.add_subplot(235,projection=proj)
            ax.set_title('Wind Speed',fontsize=8)
        elif file.startswith("Cont_ClEr"):
            ax = fig.add_subplot(236,projection=proj)
            ax.set_title('Closure Error',fontsize=8)

        ax.set_extent(latlon,crs=ccrs.PlateCarree())
        ocean = cfeature.NaturalEarthFeature(category='physical',name='ocean',scale='50m')
        ax.add_feature(ocean,facecolor='lightgray',edgecolor='none',lw=1,zorder=15)
        lakes = cfeature.NaturalEarthFeature(category='physical',name='lakes',scale='110m')
        ax.add_feature(lakes,facecolor='lightgray',edgecolor='none',lw=1,zorder=2)
        ax.add_feature(cfeature.STATES,edgecolor='black',lw=0.5,zorder=3)
        ax.add_feature(cfeature.BORDERS,edgecolor='black',lw=0.5,zorder=4)
        conf=ax.pcolormesh(lonin2d,latin2d,invar,transform=ccrs.PlateCarree(),norm=norm1,cmap=cmap1)
        axes.append(ax)
        x+=1
    plt.tight_layout(rect=[0, 0.03, 1, 1.15])   
    #Create colorbar to match data. Colorbar will be placed automatically, but labels need to be positioned specifically
    cbar = fig.colorbar(conf,ax=axes,orientation='horizontal',ticks=clevs1,location='bottom',extend='both',shrink=.8,pad=.08,aspect=35)
    ax.tick_params(labelsize=0,width=0.25,gridOn='True',grid_color='black',grid_lw=0.25,length=2,pad=1)
    cbar.outline.set_linewidth(0.25)
    ax.set_zorder(1)
    cbar.ax.set_xticklabels([-2.4,-2.1,-1.8,-1.5,-1.2,-0.9,-0.6,-0.3,0.3,0.6,0.9,1.2,1.5,1.8,2.1,2.4,2.7,3],fontsize=7)
    #Save this figure and remove colorbar before moving on to next datafile
    #fig.subplots_adjust(left=0, right=1, bottom=0, top=.95)
    plt.savefig(('../Attribution/' + outfile),dpi=500)
    #Close plot to free up some memory
    plt.close()

def main():
    path=''
    dir_list = os.listdir(path) # this needs to be the path where the EDDI*.asc file reside - if in that path already delete argument. May adjust argument to choose the ascii file I want.
    plotgen(path,dir_list)

if __name__ == '__main__':
    main()